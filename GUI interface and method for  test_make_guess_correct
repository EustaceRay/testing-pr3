import random
import tkinter as tk
from tkinter import messagebox
import unittest

class WheelOfFortune:
    def __init__(self, root):
        self.root = root
        self.word = ''
        self.hidden_word = ''
        self.guessed_letters = set()
        self.remaining_attempts = 6

        self.setup_gui()
        self.new_game()

    def setup_gui(self):
        self.word_label = tk.Label(self.root, text='', font=('Arial', 24))
        self.word_label.pack()

        self.letter_entry = tk.Entry(self.root, font=('Arial', 18), width=10)
        self.letter_entry.pack()

        self.guess_button = tk.Button(self.root, text='Угадать', command=self.make_guess)
        self.guess_button.pack()

        self.new_game_button = tk.Button(self.root, text='Новая игра', command=self.new_game)
        self.new_game_button.pack()

        self.attempts_label = tk.Label(self.root, text='', font=('Arial', 18))
        self.attempts_label.pack()

    def new_game(self):
        self.word = random.choice(['яблоко', 'банан', 'вишня', 'груша', 'ежевика'])
        self.hidden_word = '_' * len(self.word)
        self.guessed_letters.clear()
        self.remaining_attempts = 6

        self.update_word_label()
        self.update_attempts_label()

    def make_guess(self, letter=None):
        if letter is None:
            letter = self.letter_entry.get()
            self.letter_entry.delete(0, tk.END)

        if len(letter) != 1 or letter.lower() not in 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя':
            messagebox.showwarning('Неверная попытка', 'Пожалуйста, введите одну букву.')

        elif letter in self.guessed_letters:
            messagebox.showinfo('Информация', 'Вы уже угадали эту букву. Попробуйте другую.')

        elif letter in self.word:
            self.update_hidden_word(letter)
            self.guessed_letters.add(letter)

            if self.hidden_word == self.word:
                messagebox.showinfo('Поздравления', 'Вы выиграли!')
                self.new_game()

        else:
            self.remaining_attempts -= 1
            self.guessed_letters.add(letter)

            if self.remaining_attempts == 0:
                messagebox.showinfo('Очень жаль', f'Вы проиграли. Загаданное слово было: {self.word}')
                self.new_game()

        self.update_word_label()
        self.update_attempts_label()

    def update_word_label(self):
        self.word_label.config(text=self.hidden_word)

    def update_attempts_label(self):
        self.attempts_label.config(text=f'Осталось попыток: {self.remaining_attempts}')

    def update_hidden_word(self, letter):
        self.hidden_word = ''.join([char if letter == char or char in self.guessed_letters else '_' for char in self.word])

class WheelOfFortuneTest(unittest.TestCase):
    def setUp(self):
        root = tk.Tk()
        self.game = WheelOfFortune(root)

    def test_new_game(self):
        self.game.new_game()
        self.assertEqual(len(self.game.word), len(self.game.hidden_word))
        self.assertEqual(self.game.guessed_letters, set())
        self.assertEqual(self.game.remaining_attempts, 6)

    def test_make_guess_duplicate(self):
        self.game.word = 'яблоко'
        self.game.hidden_word = 'я__о_о'
        self.game.guessed_letters = {'я', 'о'}
        self.game.remaining_attempts = 3

        self.game.make_guess(letter='я')
        self.assertEqual(self.game.hidden_word, 'я__о_о')
        self.assertEqual(self.game.guessed_letters, {'я', 'о'})
        self.assertEqual(self.game.remaining_attempts, 3)

    def test_make_guess_incorrect(self):
        self.game.word = 'яблоко'
        self.game.hidden_word = 'я__о_о'
        self.game.guessed_letters = {'я', 'о'}
        self.game.remaining_attempts = 3

        self.game.make_guess(letter='з')
        self.assertEqual(self.game.hidden_word, 'я__о_о')
        self.assertEqual(self.game.guessed_letters, {'я', 'о', 'з'})
        self.assertEqual(self.game.remaining_attempts, 2)

    def test_make_guess_correct(self):
        self.game.word = 'яблоко'
        self.game.hidden_word = 'я__о_о'
        self.game.guessed_letters = {'я', 'о'}
        self.game.remaining_attempts = 3

        self.game.make_guess(letter='б')
        self.assertEqual(self.game.hidden_word, 'яб_о_о')
        self.assertEqual(self.game.guessed_letters, {'я', 'о', 'б'})
        self.assertEqual(self.game.remaining_attempts, 3)

if __name__ == '__main__':
    root = tk.Tk()
    root.title("Поле чудес")
    root.geometry("400x200")
    game = WheelOfFortune(root)
    root.mainloop()
